import { Pool } from 'pg';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function runMigrations() {
  const client = await pool.connect();
  
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–∫–æ–π –±–∞–∑–µ
    const dbResult = await client.query('SELECT current_database()');
    console.log('üìä –¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', dbResult.rows[0].current_database);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
    await client.query(`
      CREATE TABLE IF NOT EXISTS migrations (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL UNIQUE,
        executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    const { rows: executedMigrations } = await client.query(
      'SELECT name FROM migrations ORDER BY name'
    );
    
    const executedNames = new Set(executedMigrations.map(m => m.name));
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π
    const migrationsDir = path.join(__dirname, '../migrations');
    const files = fs.readdirSync(migrationsDir)
      .filter(file => file.endsWith('.sql'))
      .sort();
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π`);
    
    for (const file of files) {
      if (!executedNames.has(file)) {
        console.log(`\nüì¶ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: ${file}`);
        
        const migrationPath = path.join(migrationsDir, file);
        const sql = fs.readFileSync(migrationPath, 'utf8');
        
        // –†–∞–∑–¥–µ–ª—è–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        const queries = sql.split(';').filter(q => q.trim().length > 0);
        
        for (let i = 0; i < queries.length; i++) {
          const query = queries[i].trim();
          if (query) {
            try {
              await client.query(query + ';');
              console.log(`   ‚úÖ –ó–∞–ø—Ä–æ—Å ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω`);
            } catch (error) {
              console.error(`   ‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ ${i + 1}:`, error.message);
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–π
              continue;
            }
          }
        }
        
        await client.query(
          'INSERT INTO migrations (name) VALUES ($1)',
          [file]
        );
        
        console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${file} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
      } else {
        console.log(`‚è≠Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è ${file} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
      }
    }
    
    console.log('\nüéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π:', error.message);
  } finally {
    client.release();
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
runMigrations().then(() => {
  console.log('–ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
  process.exit(0);
}).catch(error => {
  console.error('–ù–µ—É—Å—Ç—Ä–∞–Ω–∏–º–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});